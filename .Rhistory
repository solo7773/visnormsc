quit()
.libPaths()
help('.libPaths')
R_HOME
.Library()
.Library
path.expand('~')
list.files(.libPaths())
list.files(.Library)
getwd()
.libPaths()
list.files(.libPaths())
?'.libPaths'
getwd()
list.files()
list.files('./Library/')
.libPaths()
.libPaths()
q()
.libPaths()
Sys.getenv()
.libPaths()
.libPaths()
sessionInfo()
.libPaths()
.libPaths()
.libPaths('/Users/zsf/mypkg/R')
.libPaths()
.libPaths('/Users/zsf/mypkg/R/i')
.libPaths()
.libPaths('/Users/zsf/mypkg/R/')
.libPaths()
.libPaths()
.libPaths()
install.packages("/Volumes/data/smalls/SCnorm_1.1.0.tar.gz", repos=NULL, type="source")
install.packages(c("quantreg", 'moments', 'reshape2'))
list.files(.libPaths()[1])
install.packages("/Volumes/data/smalls/SCnorm_1.1.0.tar.gz", repos=NULL, type="source")
list.files(.libPaths()[1])
search()
library(SCnorm)
search()
ls()
ls('package:SCnorm')
q()
getwd()
setwd('/Volumes/data/E_working/smalls/visnormsc/')
list.files()
library(SCnorm)
head(ExampleData)
dim(ExampleData)
ExampleData[1:3, 1:6]
ExampleData[1:3, c(1:3, 91:93)]
?checkCountDepth
checkCountDepth(Data = ExampleData, Conditions = rep(c(1, 2), each = 90, PLOT = FALSE))
list.files()
dim(bulkH1data)
data('package:SCnorm')
data(package = 'SCnorm')
dim(scH1data)
ExampleData[1:3, 1:3]
colnames(ExampleData)[1:3]
rownames(ExampleData)[1:3]
bulkH1data[1:3, 1:3]
scH1data[1:3, 1:3]
list.files()
write.table(ExampleData, 'testData/exampleData.txt', quote = F, sep = '\t')
write.table(bulkH1data, 'testData/bulkH1data.txt', quote = F, sep = '\t')
write.table(scH1data, 'testData/scH1data.txt', quote = F, sep = '\t')
dim(bulkH1data)
dim(scH1data)
?seq
seq(0, 1, length=100)
seq(0, 1, length=10)
get()
getwd()
Data = ExampleData
dim(Data)
NormalizedData = NULL
Conditions = rep(1:2, each = 90)
OutputName = NULL; PLOT = F; Tau = .5; FilterCellProporion = .1; FilterExpression = 0, NumExpressionGroups = 10; NCores = NULL; ditherCounts = F;
OutputName = NULL; PLOT = F; Tau = .5; FilterCellProporion = .1; FilterExpression = 0; NumExpressionGroups = 10; NCores = NULL; ditherCounts = F;
?data.matrix
class(Data)
str(Data)
Data[1:3, 1:6]
Data <- data.matrix(Data)
class(Data)
Data[1:3, 1:6]
bulkH1data[1:4, 1:5]
dim(Data)[1]
levels(as.factor(Conditions)) #
str(Data)
class(Data)
if(is.null(rownames(Data))) {rownames(Data) <- as.vector(sapply("X_", paste0, 1:dim(Data)[1]))}
if(is.null(colnames(Data))) {stop("Must supply sample/cell names!")}
if(is.null(Conditions)) {Conditions <- rep("1", dim(Data)[2])}
if(dim(Data)[2] != length(Conditions)) {stop("Number of columns in expression matrix must match length of conditions vector!")}
if(is.null(NCores)) {NCores <- max(1, detectCores() - 1)}
detectCores()
Levels <- levels(as.factor(Conditions)) # Number of conditions
Levels
as.list(c(1, 4, 6))
dim(Data)
DataList <- lapply(1:length(Levels), function(x) Data[,which(Conditions == Levels[x])]) # split conditions
str(DataList)
length(DataList)
str(DataList[1])
str(DataList[[1]])
dim(DataList[[1]])
(DataList[[1]])[1:3,1:6]
DataList[1]
DataList[1][[1]]
Conditions
which(Conditions == Levels[x])
FilterCellProportion
FilterCellProportion = .10
rm(FilterCellProporion)
FilterCellProportion
if(length(FilterCellProportion) > 1 & !is.list(FilterCellProportion)) {FilterCellProportion <- as.list(FilterCellProportion)}
if(length(FilterCellProportion) == 1) {
FilterCellProportion <- rep(FilterCellProportion, length(Levels))
FilterCellProportion <- as.list(FilterCellProportion)
}
FilterCellProportion
FilterCellProportion <-  lapply(1:length(Levels), function(x) max(FilterCellProportion[[x]], 10 / dim(DataList[[x]])[2]))
FilterCellProportion
1:length(Levels)
10 / dim(DataList[[1]][2])
dim(DataList[[1]])
1/90
10 / dim(DataList[[1]])[2]
FilterCellProportion
dim(DataList[[1]])[2]
SeqDepthList
SeqDepthList <- lapply(1:length(Levels), function(x) colSums(Data[,which(Conditions == Levels[x])]))
SeqDepthList
PropZerosList <- lapply(1:length(Levels), function(x) { apply(DataList[[x]], 1, function(c) sum(c != 0)) / length(SeqDepthList[[x]]) })
PropZerosList
length(PropZerosList)
str(PropZerosList)
?apply
str(DataList[[1]])
length(SeqDepthList[[1]])
SeqDepthList[[1]]
SeqDepthList
str(DataList)
PropZerosList
PropZerosList[[1]]
PropZerosList[[2]]
apply(DataList[[1]], 1, sum)
PropZerosList[[1]][1:7]
apply(DataList[[1]], 1, sum)
apply(DataList[[1]], 1, function(c) sum(c != 0))
apply(DataList[[1]], 1, function(c) sum(c))
DataList[[1]][, 1]
DataList[[1]]
DataList[[1]][1, ]
sum(DataList[[1]][1, ])
sum(DataList[[1]][1, ] != 0)
PropZerosList <- lapply(1:length(Levels), function(x) { apply(DataList[[x]], 1, function(c) sum(c != 0)) / length(SeqDepthList[[x]]) })
PropZerosList
str(PropZerosList)
PropZerosList[[1]]
PropZerosList[[2]][1:10]
MedExprAll <- apply(Data, 1, function(c) median(c[c != 0]))
MedExprAll
MedExprAll[1:10]
tail(MedExprAll)
MedExprList <- lapply(1:length(Levels), function(x) { apply(DataList[[x]], 1, function(c) median(c[c != 0])) })
MedExprList
MedExprList[[1]][1:10]
tail(MedExprList[[2]])
BeforeNorm
BeforeNorm <- TRUE
if(!is.null(NormalizedData)) {
DataList <- lapply(1:length(Levels), function(x) NormalizedData[,which(Conditions == Levels[x])])
BeforeNorm <- FALSE
}
BeforeNorm
GeneFilterList <- lapply(1:length(Levels), function(x) names(which(PropZerosList[[x]] >= FilterCellProportion[[x]] & MedExprAll >= FilterExpression)))
str(GeneFilterList)
str(GeneFilterList[[1]])
str(GeneFilterList[[2]])
range(GeneFilterList[[1]])
range(GeneFilterList[[2]])
GeneFilterList[[1]][5000]
str(Data)
str(PropZerosList)
FilterCellProportion
str(MedExprAll)
which(PropZerosList[[1]] >= FilterCellProportion[[1]] & MedExprAll >= FilterExpression)
which(PropZerosList[[1]] >= FilterCellProportion[[1]] & MedExprAll >= FilterExpression)[1:5, 1:5]
dim(which(PropZerosList[[1]] >= FilterCellProportion[[1]] & MedExprAll >= FilterExpression))
dim(PropZerosList[[1]])
str(PropZerosList)
str(FilterCellProportion)
str(MedExprAll)
str(MedExprList)
which(1:6 > 3)
6:1
which(6:1 > 3)
FilterExpression
FilterCellProportion
1 == 0 && 2 < 3
1 == 0 | 2 < 3
FilterCellProportion
str(PropZerosList)
str(GeneFilterList)
GetSlopes
?checkCountDepth
FilterCellNum
NCores
ditherCounts
SeqDepthList[[1]]
str(SeqDepthList)
colSums(Data)
NumNonZeros <- apply(Data, 1, function(x) sum(x != 0))
NumNonZeros
tail(NumNonZeros)
FilterCellNum
FilterCellNum = 10
Genes <- names(which(NumNonZeros >= FilterCellNum)) ##filter for now
?redobox
LogData <- redobox(Data, 0) #log data
?quickreg
library(SCnorm)
?redobx
?redobox
?mclapply
LogData
Genes
SlopesList <- lapply(1:length(Levels), function(x) GetSlopes(DataList[[x]][GeneFilterList[[x]],], SeqDepthList[[x]], Tau, FilterCellNum = 10, NCores, ditherCounts))
SlopesList
redobox
DATA = Data
dim(DATA)
smallc = 0
str(DATA)
DATA <= smallc
?log
log(c(2, NA))
which(DATA <= smallc)
sum(DATA <= smallc)
DATA[DATA <= smallc] <- NA #truncate some values first, usually just zero
DATA
DATA[4995:5000, 175:180]
log(2)
DATA = Data
DATA[DATA <= smallc] <- NA #truncate some values first, usually just zero
y <- log(DATA)
y[4995:5000, 175:180]
source('/Volumes/data/E_working/smalls/SCnorm/R/generalFuncs.R')
LogData <- redobox(Data, 0) #log data
LogData[1:5, 1:6]
AllReg <- unlist(mclapply(X = 1:length(Genes), FUN = quickreg, InputData = list(LogData, SeqDepth, Genes, Tau, ditherCounts, mc.cores = NCores)))
SlopesList <- lapply(1:length(Levels), function(x) GetSlopes(DataList[[x]][GeneFilterList[[x]],], SeqDepthList[[x]], Tau, FilterCellNum = 10, NCores, ditherCounts))
AllReg <- unlist(mclapply(X = 1:length(Genes), FUN = quickreg, InputData = list(LogData, SeqDepth, Genes, Tau, ditherCounts, mc.cores = NCores)))
AllReg
SeqDepth = 0
AllReg <- unlist(mclapply(X = 1:length(Genes), FUN = quickreg, InputData = list(LogData, SeqDepth, Genes, Tau, ditherCounts, mc.cores = NCores)))
AllReg
SeqDepth = 0
Tau = .5
FilterCellNum = 10
NCores
ditherCounts
if(any(SeqDepth==0))
{SeqDepth = colSums(Data)}
NumNonZeros <- apply(Data, 1, function(x) sum(x != 0))
Genes <- names(which(NumNonZeros >= FilterCellNum)) ##filter for now
LogData <- redobox(Data, 0) #log data
if (.Platform$OS.type == "windows") {
NCores = 1
}
NCores
AllReg <- unlist(mclapply(X = 1:length(Genes), FUN = quickreg, InputData = list(LogData, SeqDepth, Genes, Tau, ditherCounts, mc.cores = NCores)))
SeqDepth
NumNonZeros
1:length(Genes),
length(Genes)
str(AllReg)
str(SlopesList)
str(DataList)
dim(LogData)
mc.cores
?mclapply
LogData
str(LogData)
SeqDepth
Genes
Tau
ditherCounts
mc.cores
NCores
LogData
SeqDepth
Genes
Tau
str(getGeneric)
str(Genes)
Genes[1]
Genes
?rq
4/25
LogData
SeqDepth
?dither
dither(1:5, value = 0.01)
dither(1:5)
dither(1:5, value = 0.01)
rq(LogData[1, ] ~ log(SeqDepth), 0.5, method = 'fn')
rq(LogData[1, ] ~ log(SeqDepth), 0.5, method = 'fn')$coef[2]
lm(res ~ var, data = data.frame(res = LogData[1, ], var = log(SeqDepth)))
?plot
plot(LogData[1, ], log(SeqDepth))
?line
?abline
abline(-10.43, 0.977)
lm(var ~ res, data = data.frame(res = LogData[1, ], var = log(SeqDepth)))
plot(LogData[1, ], log(SeqDepth))
abline(-10.43, 0.977)
plot(LogData[1, ], log(SeqDepth))
abline(-10.43, 0.977)
par(mfrow = c(1, 1))
plot(LogData[1, ], log(SeqDepth))
abline(-10.43, 0.977)
?lm
gl(2, 10, 20)
plot(lm(res ~ var, data = data.frame(res = LogData[1, ], var = log(SeqDepth))))
alligator = data.frame(
lnLength = c(3.87, 3.61, 4.33, 3.43, 3.81, 3.83, 3.46, 3.76,
3.50, 3.58, 4.19, 3.78, 3.71, 3.73, 3.78),
lnWeight = c(4.87, 3.93, 6.46, 3.33, 4.38, 4.70, 3.50, 4.50,
3.58, 3.64, 5.90, 4.43, 4.38, 4.42, 4.25)
)
plot(alligator)
plot(lm(lnWeight ~ lnLength, alligator))
lm(lnWeight ~ lnLength, alligator)
plot(alligator)
3.6*3.4-8.4
lm(res ~ var, data = data.frame(res = LogData[1, ], var = log(SeqDepth)))
plot(LogData[1, ], log(SeqDepth))
abline(a = -10.43, b = 0.977)
abline(v = 2)
abline(v = 3)
abline(12.5, 1)
rq(LogData[1, ] ~ log(SeqDepth), tau = 0.5, method = 'fn')
abline(coef = c(-11, 1.05))
abline(coef = c(-11, 1.05))
abline(coef = c(11, 1.05))
abline(coef = c(12, 1.05))
?plot
plot(LogData[1, ], log(SeqDepth), fig = (-3, 7, -15, 20))
plot(LogData[1, ], log(SeqDepth), fig = c(-3, 7, -15, 20))
plot(LogData[1, ], log(SeqDepth), fig = c(-3, 7, -15, 20), new = TRUE)
plot(LogData[1, ], log(SeqDepth), plt = c(-3, 7, -15, 20), new = TRUE)
plot(LogData[1, ], log(SeqDepth), ylim = c(-15, 20))
abline(coef = c(-11, 1.05))
abline(coef = c(-10, 0.9))
abline(coef = c(10, 0.1))
abline(coef = c(13, 0.1))
plot(log(SeqDepth), LogData[1, ])
abline(-11, 1.05)
abline(-10, 0.977)
abline(rq(LogData[1, ]~ log(SeqDepth), tau = 0.2, method = 'fn')$coef)
abline(rq(LogData[1, ]~ log(SeqDepth), tau = 0.1, method = 'fn')$coef)
abline(rq(LogData[1, ]~ log(SeqDepth), tau = 0, method = 'fn')$coef)
abline(rq(LogData[1, ]~ log(SeqDepth), tau = 0.9, method = 'fn')$coef)
abline(rq(LogData[1, ]~ log(SeqDepth), tau = 0.1:0.9, method = 'fn')$coef)
abline(rq(LogData[1, ]~ log(SeqDepth), tau = 3, method = 'fn')$coef)
abline(rq(LogData[1, ]~ log(SeqDepth), tau = 0.3, method = 'fn')$coef)
abline(rq(LogData[1, ]~ log(SeqDepth), tau = 1, method = 'fn')$coef)
rm(alligator)
